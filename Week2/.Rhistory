seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都", "來", "要", "們", "一", "第", "他", "有", "而", "了", "這個", "因為", "這些", "也", "她")
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都", "來", "要", "們", "一", "第", "他", "有", "而", "了", "這個", "因為", "這些", "也", "她")
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
freq
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都",
"來", "要", "們", "一", "第", "他", "有", "而",
"了", "這個", "因為", "這些", "也", "她", "但",
"為", "這", "說", "不", "社", "沒", "什麼", "就"
)
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都",
"來", "要", "們", "一", "第", "他", "有", "而",
"了", "這個", "因為", "這些", "也", "她", "但",
"為", "這", "說", "不", "社", "沒", "什麼", "就"
)
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都",
"來", "要", "們", "一", "第", "他", "有", "而",
"了", "這個", "因為", "這些", "也", "她", "但",
"為", "這", "說", "不", "社", "沒", "什麼", "就"
)
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
wk <- worker()
wk <- worker()
View(wk)
View(wk)
View(seg)
View(wk)
wk <- worker()
text <- readLines("news.txt", encoding = "UTF-8")
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都",
"來", "要", "們", "一", "第", "他", "有", "而",
"了", "這個", "因為", "這些", "也", "她", "但",
"為", "這", "說", "不", "社", "沒", "什麼", "就"
)
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
wk <- worker()
text <- readLines("news.txt", encoding = "UTF-8")
stopwords <- c("的", "與", "在", "和", "會", "是", "我", "都",
"來", "要", "們", "一", "第", "他", "有", "而",
"了", "這個", "因為", "這些", "也", "她", "但",
"為", "這", "說", "不", "社", "沒", "什麼", "就"
)
stopwords.pattern <- paste0(stopwords, sep = "|", collapse = "") %>%
substr(1, nchar(.) -1)
text <- gsub(stopwords.pattern, " ", text)
seg <- wk[text]
seg <- as.data.frame(table(seg))
freq <- seg[order(seg$Freq, decreasing = T), ]
par(family=("Heiti TC Light"))
wordcloud(freq$seg, freq$Freq,
min.freq = 2, random.order = F,
color = brewer.pal(8, "Dark2"))
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
library(NLP)
library(tm)
library(jiebaRD)
library(jiebaR)
library(RColorBrewer)
library(wordcloud)
wk <- worker()
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 37,
language = "zh-TW", maptype = "satellite")
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "satellite")
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 20,
language = "zh-TW", maptype = "satellite")
ggmap(map)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 20,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20151116152215.csv")
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 5,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 7,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 7,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)+
facet_grid( ~ PublishAgency)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
library(mapproj)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 7)
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
uv <- read.csv("UV_20180717190444.csv")
library(ggmap)
map <- get_map(location = clon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = clon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
library(mapproj)
ggmap(map)
uv <- read.csv("UV_20180717190444.csv")
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
library(ggmap)
map <- get_map(location = c(lon = 121.32, lat = 25.02), zoom = 10,
language = "zh-TW", maptype = "toner-lite")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
```{r}
uv <- read.csv("UV_20151116152215.csv")
````
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
```{r}
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
````
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
```{r}
uv <- read.csv("UV_20151116152215.csv")
````
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
```{r}
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
````
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20151116152215.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
uv <- read.csv("UV_20151116152215.csv")
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717194140.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717194140.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 10, language = "zh-TW", maptype = "rtoner-lite")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717194140.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = 'Taiwan', zoom = 10, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
uv <- read.csv("UV_20180717194140.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = "Taiwan", zoom = 10, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = lon = 120.233937, lat = 22.993013, zoom = 10, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 120.233937, lat = 22.993013), zoom = 10, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2.cvs")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 120, lat = 22), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23), zoom = 9, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 121.5, lat = 23), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
##將資料畫在地圖上
library(ggmap)
library(mapproj)
###從政府資料開放平臺上下載紫外線即時監測資料的 csv 檔，接著將資料讀進 R 中。
uv <- read.csv("UV_20180717190444 2.csv")
###原始的經緯度資料是以度分秒表示，在使用前要轉換為度數表示。
lon.deg <- sapply((strsplit(as.character(uv$WGS84Lon), ",")), as.numeric)
uv$lon <- lon.deg[1, ] + lon.deg[2, ]/60 + lon.deg[3, ]/3600
lat.deg <- sapply((strsplit(as.character(uv$WGS84Lat), ",")), as.numeric)
uv$lat <- lat.deg[1, ] + lat.deg[2, ]/60 + lat.deg[3, ]/3600
###把資料加入地圖中
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 7.5, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 7, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI), data = uv)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI, color = red), data = uv)
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI, color = "red"), data = uv)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI, color = "red"), data = uv) + ggtitle("全台紫外線數值")
library(ggmap)
map <- get_map(location = c(lon = 121, lat = 23.5), zoom = 8, language = "zh-TW", maptype = "hybrid")
ggmap(map) + geom_point(aes(x = lon, y = lat, size = UVI, color = "red"), data = uv) + ggtitle("UVI of Taiwan")
